name: Build-All-Platforms

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
      # Check-out repository
      - uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10" # Version range or exact version of a Python version to use, using SemVer's version range syntax
          architecture: "x64" # optional x64 or x86. Defaults to x64 if not specified
          cache: "pip"
          cache-dependency-path: |
            **/requirements*.txt
      # Install dependencies
      - name: Install Dependencies
        run: |
          pip install -r requirements.txt
      - name: Build Executable
        uses: Nuitka/Nuitka-Action@v0.6
        with:
          nuitka-version: main
          script-name: src/main.py
          onefile: true
          standalone: true
          enable-plugins: pyqt5
          output-file: Anzhc-s-Dataset-Tagger
          enable-console: false

      # Uploads artifacts
      - name: "Upload Artifacts"
        uses: actions/upload-artifact@v3
        with:
          name: ${{ runner.os }} Build
          path: |
            # if filename Anzhc-s-Dataset-Tagger.exe exist for windows in build folder
            ${{ runner.os == 'Windows-latest' && 'build/Anzhc-s-Dataset-Tagger.exe' || '' }}
            # if filename Anzhc-s-Dataset-Tagger exist for linux in build folder
            ${{ runner.os == 'ubuntu-latest' && 'build/Anzhc-s-Dataset-Tagger' || '' }}

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: "Create release"
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ needs.build.outputs.artifacts }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
